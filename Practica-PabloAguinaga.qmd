---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

    ```{r}
    library(tidyverse)

    airbnb |> select(City, Room.Type, Neighbourhood, Accommodates, Bathrooms, Bedrooms, Beds, Price, Square.Feet, Guests.Included, Extra.People, Review.Scores.Rating, Latitude, Longitude) |> filter(City == 'Madrid', Room.Type == 'Entire home/apt', Neighbourhood != '') -> df_madrid

    df_madrid |> select(Neighbourhood, Accommodates, Bathrooms, Bedrooms, Beds, Price, Square.Feet, Guests.Included, Extra.People, Review.Scores.Rating, Latitude, Longitude) -> df_madrid

    head(df_madrid)

    #Compruebo que no hay barrios vacíos mediante table()
    table(df_madrid$Neighbourhood == "")
    ```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

    ```{r}

    df_madrid['Square.Meters'] <- df_madrid['Square.Feet']*0.092903
    ```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

    ```{r}
    na_counts <- table(is.na(df_madrid$Square.Meters))
    cat('El porcentaje de NA en Square.Meters es ', (na_counts[["TRUE"]]/nrow(df_madrid))*100, '%')

    ```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

    ```{r}
    cero_m2 <- table(df_madrid$Square.Meters == 0)
    cat('El porcentaje de los apartamentos QUE tienen 0 metros cuadrados es: ',(cero_m2[["TRUE"]] / na_counts[["FALSE"]])*100, "%")
    ```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

    ```{r}
    df_madrid$Square.Meters[df_madrid$Square.Meters == 0] <- NA

    cat("Esta tabla muestra los NA en la columna Square.Meters: ")
    table(is.na(df_madrid$Square.Meters))
    ```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer: \* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más. \* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

    ```{r}
    library(ggplot2)
    #Me aseguro de que la columna Square.Meters no tenga valores NA. Filtro por valores menores de 250 para quitar outlayers.
    df_madrid_clean <- df_madrid |> filter(!is.na(Square.Meters), Square.Meters < 450)

    #dibujo el histograma con ggplot
    ggplot(df_madrid_clean, aes(x = Square.Meters)) + geom_histogram(binwidth =40 , fill = 'blue', color = 'black') + labs(title = "histograma de Squre.Meters", x = "Square Meters", y = "Frecuencia") + theme_minimal()
    ```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

    ```{r}
    # Utilizo la fuinción replace ()
    df_madrid$Square.Meters <- replace(df_madrid$Square.Meters, df_madrid$Square.Meters < 20, NA)
    ```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

    ```{r}
    df_num_na <-df_madrid |>group_by(Neighbourhood) |>
    summarize(num_NA = sum(is.na(Square.Meters)),num_total=n())
    barrios<-df_num_na[df_num_na$num_NA!=df_num_na$num_total,]$Neighbourhood

    # Ahora filtramos y nos quedamos con los barrios donde la suma de todos los Na por barrio es diferente a las filas por barrio. Es decir, elimnamos del dataset todos los barrios que tienen todos los apartamentos con NA en la ciolumna Square.Meters  
    df_madrid <- df_madrid |> filter((Neighbourhood %in% barrios))

    ```

    ------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

    ```{r}
    # Hay mas de 2 barrios --> no es t-student
    # Pasamos a factor los barrios
    df_madrid$Neighbourhood <- as.factor(df_madrid$Neighbourhood)


    # realizamos el test de Shapiro y abrazamos la hipótesis alternativa porque el pvalor es muy bajo : No es una distribución normal-Gaussiana
    shapiro.test(df_madrid$Square.Meters) 

    # Usamos el test de Kruskal (equivalente al Anova para distribuciones gausssianas). 

    kruskal.test(Square.Meters ~ Neighbourhood, data = df_madrid)
     
    #Con el test de kruscal el pvalor es suficientemente bajo, lo que nos dice que son distintos.
    ```

    ------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

    ```{r}
    # Aplicamos el test de Tukey
    tky <- TukeyHSD(aov(Square.Meters ~ Neighbourhood, data=df_madrid))
    tky.result <- data.frame(tky$Neighbourhood)
    cn <-sort(unique(df_madrid$Neighbourhood))
    resm <- matrix(NA, length(cn),length(cn))
    rownames(resm) <- cn
    colnames(resm) <- cn
    resm[lower.tri(resm) ] <- round(tky.result$p.adj,4)
    resm[upper.tri(resm) ] <- t(resm)[upper.tri(resm)] 
    diag(resm) <-  1
    tky.result
    ```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

```{r}
library(dendextend)

resm.dist <- as.dist(1 -resm)
resm.tree <- hclust(resm.dist, method = "complete")
resm.dend <- as.dendrogram(resm.tree)
plot(resm.dend)

```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

    ```{r}
    clusters <- cutree(resm.dend, h= 0.2)
    plot(color_branches(resm.dend, h=0.2), leaflab = "none")
    abline(h = 0.2, col = "red", lty = 2)
    clusters <- cutree(resm.tree, h=0.2)
    num_clusters <- length(unique(clusters))
    cat("Número de clusters:", num_clusters, "\n")
    table(clusters)
    ```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

    ```{r}
    #Creo el data frame cluster con la columna "neighbourhood para que haga el match

    df_clusters <- data.frame(Neighbourhood = names(clusters), Cluster = clusters)
    #creo la nueva columna con los clusters
    df_madrid <- merge(df_madrid, df_clusters, by = "Neighbourhood")
    # cambio el nombre de la columna
    names(df_madrid)[names(df_madrid) == "Cluster"] <- "neighb_id"
    # Mi nueva columna de identificación del cluster de cada barrio es un factor
    df_madrid$neighb_id = as.factor(df_madrid$neighb_id)
    head(df_madrid)

    ```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

    ```{r}
    #regresión linea tema 9. 

    set.seed(12345)
    idx<-sample(1:nrow(df_madrid),nrow(df_madrid)*0.7)
    df_madrid.train<- df_madrid[idx,]
    df_madrid.test <- df_madrid[-idx,]

    model1<-lm(data=df_madrid.train,formula=Square.Meters ~ Bathrooms+Bedrooms+Beds+Price+neighb_id)
    summary(model1)



    ```

------------------------------------------------------------------------

```{r}

# Me quedo con las 3 variables que me indican pvalor mas bajo: Bathrooms+Bedrooms+neighb_id
model<-lm(data=df_madrid.train,formula=Square.Meters ~ Bathrooms+Bedrooms+neighb_id)
summary(model)
```

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

```{r}
predictions <- predict(model, newdata = df_madrid.test)
print(predictions)


```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

    ```{r}
    # La calidad de un modelo se evalua con el cálculo del error cuadrático medio en testing. 

    # le decimos quen o tenga en cuenta los valores NA

    mse <- mean((df_madrid.test$Square.Meters - predictions)^2,na.rm = TRUE) 
    rmse <- sqrt(mse)


    cat("RMSE:", rmse)
    print(model)

    ```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

    ```{r}
    neighb_id_sol <- unique(df_madrid$neighb_id[df_madrid$Neighbourhood == "Sol"])

    new_apartment <- data.frame(
      Bathrooms = 1,
      Bedrooms = 3,
      Price = 80,
      neighb_id = neighb_id_sol,
      Accommodates = 6,
      Beds = 3
    )

    predicted_sqm <- predict(model, newdata = new_apartment)
    print(predicted_sqm)
    ```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
df_madrid$Square.Meters[is.na(df_madrid$Square.Meters)] <- predict(model, df_madrid[is.na(df_madrid$Square.Meters),])
```

```{r}
#reviso mi data frame con los Square.Meters predichos
view(df_madrid)
```
